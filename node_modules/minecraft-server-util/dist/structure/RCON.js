"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RCON = void 0;
const assert_1 = __importDefault(require("assert"));
const events_1 = require("events");
const resolveSRV_1 = __importDefault(require("../util/resolveSRV"));
const TCPSocket_1 = __importDefault(require("./TCPSocket"));
const Packet_1 = __importDefault(require("./Packet"));
const ipAddressRegEx = /^\d{1,3}(\.\d{1,3}){3}$/;
function applyDefaultOptions(options) {
    // Apply the provided options on the default options
    return Object.assign({
        port: 25575,
        password: '',
        timeout: 1000 * 15,
        enableSRV: true
    }, options);
}
/**
 * A utility class for executing commands remotely on a Minecraft server.
 * @class
 * @extends {EventEmitter}
 * @implements {RCONEvents}
 */
class RCON extends events_1.EventEmitter {
    /**
     * Creates a new RCON class with the host and options
     * @param {string} host The host of the server
     * @param {RCONOptions} options The options for the RCON client
     * @constructor
     */
    constructor(host, options) {
        super();
        this.socket = null;
        const opts = applyDefaultOptions(options);
        assert_1.default(typeof host === 'string', `Expected 'host' to be a string, got ${typeof host}`);
        assert_1.default(host.length > 0, `Expected host.length > 0, got ${host.length}`);
        assert_1.default(typeof opts.port === 'number', `Expected 'options.port' to be a number, got ${typeof opts.port}`);
        assert_1.default(opts.port > 0, `Expected 'options.port' to be greater than 0, got ${opts.port}`);
        assert_1.default(opts.port < 65536, `Expected 'options.port' to be less than 65536, got ${opts.port}`);
        assert_1.default(Number.isInteger(opts.port), `Expected 'options.port' to be an integer, got ${opts.port}`);
        assert_1.default(typeof opts.enableSRV === 'boolean', `Expected 'options.enableSRV' to be a boolean, got ${typeof opts.enableSRV}`);
        assert_1.default(typeof opts.timeout === 'number', `Expected 'options.timeout' to be a number, got ${typeof opts.timeout}`);
        assert_1.default(opts.timeout > 0, `Expected 'options.timeout' to be greater than 0, got ${opts.timeout}`);
        assert_1.default(Number.isInteger(opts.timeout), `Expected 'options.timeout' to be an integer, got ${opts.timeout}`);
        assert_1.default(typeof opts.password === 'string', `Expected 'options.password' to be a string, got ${typeof opts.password}`);
        assert_1.default(opts.password.length > 0, `Expected options.password.length > 0, got ${opts.password.length}`);
        this.host = host;
        this.isLoggedIn = false;
        this.options = opts;
        this.requestID = 0;
    }
    /**
     * Connects to the server using TCP and sends the correct login packets.
     * @returns {Promise<void>} A Promise that resolves when it has successfully logged in
     * @async
     */
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            let srvRecord = null;
            // Automatically resolve a connectable address from a known address using SRV DNS records
            if (this.options.enableSRV && !ipAddressRegEx.test(this.host)) {
                srvRecord = yield resolveSRV_1.default(this.host);
                if (srvRecord) {
                    this.options.port = srvRecord.port;
                }
            }
            // Create a TCP connection to the server and wait for it to connect
            this.socket = yield TCPSocket_1.default.connect(this.host, this.options.port, this.options.timeout);
            {
                // Create a login packet and send it to the server
                // https://wiki.vg/RCON#3:_Login
                const loginPacket = new Packet_1.default();
                loginPacket.writeIntLE(10 + this.options.password.length);
                loginPacket.writeIntLE(++this.requestID);
                loginPacket.writeIntLE(3);
                loginPacket.writeString(this.options.password, false);
                loginPacket.writeByte(0x00, 0x00);
                yield this.socket.writePacket(loginPacket, false);
            }
            {
                // Wait for the next packet back, determine if the login was successful
                const length = yield this.socket.readIntLE();
                const requestID = yield this.socket.readIntLE();
                yield this.socket.readIntLE();
                if (requestID === -1) {
                    throw new Error('Failed to connect to RCON, invalid password');
                }
                yield this.socket.readBytes(length - 8);
                this.isLoggedIn = true;
            }
            process.nextTick(() => __awaiter(this, void 0, void 0, function* () {
                while (this.socket !== null) {
                    const length = yield this.socket.readIntLE();
                    yield this.socket.readIntLE();
                    const packetType = yield this.socket.readIntLE();
                    if (packetType === 0) {
                        let output = '';
                        if (length > 10) {
                            output = String.fromCodePoint(...yield this.socket.readBytes(length - 10));
                        }
                        this.emit('output', output);
                        yield this.socket.readBytes(2);
                    }
                    else {
                        yield this.socket.readBytes(length - 8); // Discard the rest of the unknown packet
                    }
                }
            }));
        });
    }
    /**
     * Executes commands on the server after it has successfully logged in
     * @param {string} command The command to execute
     * @returns {Promise<void>} The Promise that resolves whenever the command has executed
     * @async
     */
    run(command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket === null || this.socket.socket.connecting) {
                throw new Error('Socket has not connected yet, please run RCON#connect()');
            }
            if (!this.isLoggedIn) {
                throw new Error('Client is not logged in or login was unsuccessful, please run RCON#connect()');
            }
            const commandPacket = new Packet_1.default();
            commandPacket.writeIntLE(10 + command.length);
            commandPacket.writeIntLE(++this.requestID);
            commandPacket.writeIntLE(2);
            commandPacket.writeString(command, false);
            commandPacket.writeByte(0x00, 0x00);
            return this.socket.writePacket(commandPacket, false);
        });
    }
    /**
     * Closes the connection to the server
     * @returns {Promise<void>} A Promise that resolves when the connection has closed
     * @async
     */
    close() {
        if (this.socket === null) {
            throw new Error('Socket is already closed');
        }
        return this.socket.destroy();
    }
}
exports.RCON = RCON;
