"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryFull = void 0;
const assert_1 = __importDefault(require("assert"));
const Packet_1 = __importDefault(require("./structure/Packet"));
const resolveSRV_1 = __importDefault(require("./util/resolveSRV"));
const getTimeoutPromise_1 = __importDefault(require("./util/getTimeoutPromise"));
const UDPSocket_1 = __importDefault(require("./structure/UDPSocket"));
const parseDescription_1 = __importDefault(require("./util/parseDescription"));
const ipAddressRegEx = /^\d{1,3}(\.\d{1,3}){3}$/;
let sessionCounter = 0;
function applyDefaultOptions(options) {
    // Apply the provided options on the default options
    return Object.assign({
        port: 25565,
        timeout: 1000 * 5,
        enableSRV: true,
        sessionID: ++sessionCounter
    }, options);
}
/**
 * Performs a full query on the server using the UDP protocol.
 * @param host The host of the server
 * @param options The options to use when performing the query
 * @returns {Promise<FullQueryResponse>} The full query response data
 * @async
 */
function queryFull(host, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return __awaiter(this, void 0, void 0, function* () {
        // Applies the provided options on top of the default options
        const opts = applyDefaultOptions(options);
        // Assert that the arguments are the correct type and format
        assert_1.default(typeof host === 'string', `Expected 'host' to be a string, got ${typeof host}`);
        assert_1.default(host.length > 0, 'Expected \'host\' to have content, got an empty string');
        assert_1.default(typeof options === 'object' || typeof options === 'undefined', `Expected 'options' to be an object or undefined, got ${typeof options}`);
        assert_1.default(typeof opts === 'object', `Expected 'options' to be an object, got ${typeof opts}`);
        assert_1.default(typeof opts.port === 'number', `Expected 'options.port' to be a number, got ${typeof opts.port}`);
        assert_1.default(opts.port > 0, `Expected 'options.port' to be greater than 0, got ${opts.port}`);
        assert_1.default(opts.port < 65536, `Expected 'options.port' to be less than 65536, got ${opts.port}`);
        assert_1.default(Number.isInteger(opts.port), `Expected 'options.port' to be an integer, got ${opts.port}`);
        assert_1.default(typeof opts.timeout === 'number', `Expected 'options.timeout' to be a number, got ${typeof opts.timeout}`);
        assert_1.default(opts.timeout > 0, `Expected 'options.timeout' to be greater than 0, got ${opts.timeout}`);
        assert_1.default(typeof opts.sessionID === 'number', `Expected 'options.sessionID' to be a number, got ${typeof opts.sessionID}`);
        assert_1.default(opts.sessionID > 0, `Expected 'options.sessionID' to be greater than 0, got ${opts.sessionID}`);
        assert_1.default(opts.sessionID < 0xFFFFFFFF, `Expected 'options.sessionID' to be less than ${0xFFFFFFFF}, got ${opts.sessionID}`);
        assert_1.default(Number.isInteger(opts.sessionID), `Expected 'options.sessionID' to be an integer, got ${opts.sessionID}`);
        assert_1.default(typeof opts.enableSRV === 'boolean', `Expected 'options.enableSRV' to be a boolean, got ${typeof opts.enableSRV}`);
        let challengeToken;
        let srvRecord = null;
        // Automatically resolve from host (e.g. play.hypixel.net) into a connect-able address
        if (opts.enableSRV && !ipAddressRegEx.test(host)) {
            srvRecord = yield resolveSRV_1.default(host);
        }
        // Create a new UDP connection to the specified address
        const socket = new UDPSocket_1.default((_a = srvRecord === null || srvRecord === void 0 ? void 0 : srvRecord.host) !== null && _a !== void 0 ? _a : host, opts.port);
        {
            // Create a Handshake packet and send it to the server
            // https://wiki.vg/Query#Request
            const requestPacket = new Packet_1.default();
            requestPacket.writeByte(0xFE, 0xFD, 0x09);
            requestPacket.writeIntBE(opts.sessionID);
            yield socket.writePacket(requestPacket);
        }
        {
            // Read the response packet for the Handshake from the server
            // https://wiki.vg/Query#Response
            const responsePacket = yield socket.readPacket();
            const type = responsePacket.readByte();
            const sessionID = responsePacket.readIntBE();
            challengeToken = parseInt(responsePacket.readStringNT());
            if (type !== 0x09) {
                throw new Error('Server sent an invalid payload type');
            }
            if (sessionID !== opts.sessionID) {
                throw new Error('Session ID in response did not match client session ID');
            }
            if (isNaN(challengeToken)) {
                throw new Error('Server sent an invalid challenge token');
            }
        }
        {
            // Create a Full Stat Request packet and send it to the server
            // https://wiki.vg/Query#Request_3
            const requestPacket = new Packet_1.default();
            requestPacket.writeByte(0xFE, 0xFD, 0x00);
            requestPacket.writeIntBE(opts.sessionID);
            requestPacket.writeIntBE(challengeToken);
            requestPacket.writeByte(0x00, 0x00, 0x00, 0x00);
            yield socket.writePacket(requestPacket);
        }
        const players = [];
        let gameType, version, software, levelName, plugins, onlinePlayers, maxPlayers, description;
        {
            // Create an empty map of key,value pairs for the response
            const map = new Map();
            // Read the response packet for the Full stat from the server
            const responsePacket = yield socket.readPacket();
            const type = responsePacket.readByte();
            const sessionID = responsePacket.readIntBE();
            if (type !== 0x00) {
                throw new Error('Server sent an invalid payload type');
            }
            if (sessionID !== opts.sessionID) {
                throw new Error('Session ID in response did not match client session ID');
            }
            responsePacket.readBytes(11);
            let key;
            while ((key = responsePacket.readStringNT()) !== '') {
                map.set(key, responsePacket.readStringNT());
            }
            responsePacket.readBytes(10);
            let player;
            while ((player = responsePacket.readStringNT()) !== '') {
                players.push(player);
            }
            const pluginsRaw = (map.get('plugins') || '').split(';');
            gameType = (_b = map.get('gametype')) !== null && _b !== void 0 ? _b : null;
            version = (_c = map.get('version')) !== null && _c !== void 0 ? _c : null;
            software = (_d = pluginsRaw[0]) !== null && _d !== void 0 ? _d : null;
            plugins = pluginsRaw.slice(1);
            levelName = (_e = map.get('map')) !== null && _e !== void 0 ? _e : null;
            onlinePlayers = (_f = parseInt(map.get('numplayers') || '')) !== null && _f !== void 0 ? _f : null;
            maxPlayers = (_g = parseInt(map.get('maxplayers') || '')) !== null && _g !== void 0 ? _g : null;
            description = parseDescription_1.default((_h = map.get('motd')) !== null && _h !== void 0 ? _h : '');
        }
        // Destroy the socket, it is no longer needed
        yield socket.destroy();
        return {
            host,
            port: opts.port,
            srvRecord,
            gameType,
            version,
            software,
            plugins,
            levelName,
            onlinePlayers,
            maxPlayers,
            players,
            description
        };
    });
}
/**
 * Performs a full query on the server using the UDP protocol.
 * @param host The host of the server
 * @param options The options to use when performing the query
 * @returns {Promise<FullQueryResponse>} The full query response data
 * @async
 */
function queryWithTimeout(host, options) {
    var _a;
    return Promise.race([
        queryFull(host, options),
        getTimeoutPromise_1.default((_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : 1000 * 15, 'Failed to query server within time')
    ]);
}
exports.queryFull = queryWithTimeout;
